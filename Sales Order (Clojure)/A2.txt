(defn print-menu []
  (println "\n\n" "*** Sales Menu ***")
  (println "------------------")
  (println "1. Display Customer Table\n2. Display Product Table\n3. Display Sales Table\n4. Total Sales for Customer\n5. Total Count for Product\n6. Exit")
  (println "\nEnter an option?")
)
(defn option-1 [t_list]
  (def size (count t_list))
  (loop [i 0]
    (when (< i size)
      (def cust-temp (get t_list i))
      (loop [j 0]
        (when (< j (count cust-temp))
          #_(println (get cust-temp j))
          (if (= j 0) (print (get cust-temp j)":" "[") (print "\"" (get cust-temp j) "\""))
          (if (> j 2) (println "]"))
          (recur (+ j 1))
        )
      )
      (recur (+ i 1))
    )
  )
)
(defn option-2 []
  (println "Option 2")
)
(defn option-3 []
  (println "Option 3")
)
(defn option-4 []
  (println "Option 4")
)
(defn option-5 []
  (println "Option 5")
)

(defn main []

  (def str1 (slurp "cust.txt"))
  (def cust-array (clojure.string/split str1 #"\n"))
  (def arr-size (count cust-array))

  #_(def customers (atom {}))
  (def t_list [])

  (loop[x 0]
    (when (< x arr-size)
      (let [y (clojure.string/split (cust-array x) #"\|")]
        (def tmp-id (get y 0))
        (def item-size (count y))
        (def t_list (conj t_list y))
      )
      (recur (+ x 1))
    )
  )
  (def t_list (into [] (sort-by first t_list)))

  (loop []
    (print-menu)
    (let [input (read-line)]
      (case input
        "1" (option-1 t_list)
        "2" (option-2)
        "3" (option-3)
        "4" (option-4)
        "5" (option-5)
        ""
      )
    )
    (recur)
  )

  #_(println (get t_list 2))
)

(main)